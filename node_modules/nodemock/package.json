{
  "name": "nodemock",
  "version": "0.2.17",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/nodemock",
  "description": "Simple Yet Powerful Mocking Framework for NodeJs",
  "author": {
    "name": "Arunoda Susiripala",
    "email": "arunoda.susiripala@gmail.com"
  },
  "homepage": "https://github.com/arunoda/nodemock",
  "licenses": [
    {
      "type": "The MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:arunoda/nodemock.git"
  },
  "tags": [
    "mock",
    "unit",
    "testing",
    "nodemock"
  ],
  "readme": "Node Mock - Simple Yet Powerful Mocking Framework for NodeJs\n============================================================\n\nNodeMock is a very simple to use mocking framework which can be used to \nmock functions in JavaScript objects. \nNodeMock creates mock methods in less code with more expressive manner\n\nFeatures\n--------\nBesides it's simplicity it supports following features\n\n* Does not need an existing object to create the mock\n* Verify arguments (we check deeply on objects and arrays to check the validity)\n* Allow a return to be sent\n* Assertion to check whether all the rules executed\n* Callbacks can also be executed with providing arguments\n* Multiple mock functions in one object\n* Alter a mock function later on\n* Method chaining allows creating mocks super easy\n* Fail support added when calling method that should not be called\n* Mock support to call a single method more than once\n* Repetitive support\n* ignore methods from mocking behaviour\n\t\nTesting\n-------\nNode JS can be used with any testing framework. And we've used it with Nodeunit and it's a perfect match.\n[See Examples](https://github.com/arunoda/nodemock/blob/master/test/nodemock.js \"Nodemock with Nodeunit\")\n\nInstall\n---------\nnpm install nodemock\n\nUsage\n------\n\n### Load the Module\n\tvar nodemock = require(\"nodemock\");\n\n### Creating a mock function with taking arguments and return value\n\tvar mocked = nodemock.mock(\"foo\").takes(10, [10, 20, 30]).returns(98);\n\t\n\tmocked.foo(10, [10, 20, 30]); // this will return 98\n\t\n\tmocked.foo(10); //throws execption\n\t\n### Creating a mock with callback support\n\tvar mocked = nodemock.mock(\"foo\").takes(20, function(){}).calls(1, [30, 40]);\n\t\n\tmocked.foo(20, function(num, arr) {\n\t\tconsole.log(num); //prints 30\n\t\tconsole.log(arr); //prints 40\n\t});\n\t\n\t/*\n\t\tWhen you invoke foo() nodemock will calls the callback(sits in argument index 1 - as specified)\n\t\twith the parameters 30 and 40 respectively. \n\t*/\n\n### Controlling callbacks\nWith the asynchronous nature of NodeJS(and brower with AJAX too) it'll be great if we can control the execution of the callback in the testing environment. And `ctrl()` of nodemock helps that\n\n\tvar ctrl = {};\n\tvar mocked = nodemock.mock('foo').takes(10, function() {}).ctrl(1, ctrl);\n\t//where ever in your codebase\n\tctrl.trigger(10, 20); // you can call this as many as you want\n\t\n### Add multiple mock functions\n\tvar mocked = nodemock.mock(\"foo\").takes(10).returns(30);\n\tmocked.foo(10); //gives 30\n\t\n\tmocked.mock(\"bar\").takes(true).returns(40);\n\tmocked.bar(true); // gives 40\n\n\t\n### Assertion Support\n\tvar mocked = nodemock.mock(\"foo\").takes(20);\n\tvar mocked = nodemock.mock(\"bar\").takes(40);\n\t\n\tmocked.foo(20);\n\tmocked.bar(40);\n\t\n\t//check whether what we've defined is actually executed\n\tmocked.assert(); //returns true\n\t\n### Fails when calls any method in the mock object\n\tvar mocked = nodemock.fail();\n\tmocked.foo(); //thorws an exception\n\tmocked.bar(); //throws an exception\n\t\n### Fails when calls some particular method in the mock object\n\tvar mocked = nodemock.mock(\"foo\").fail();\n\tmocked.mock(\"bar\").takes(10);\n\tmocked.foo(); //thorws an exception\n\tmocked.bar(10); //works perfectly\n\t\n### calls a single mocked method, multiple times\n\t\n\tvar mocked = nodemock.mock(\"foo\").takes(10, 20).times(2);\n\t\n\tmocked.foo(10, 20);\n\tmocked.foo(10, 20);\n\n### calls a single mocked method, multiple times with different returns\n\t\n\tvar mocked = nodemock.mock(\"foo\").takes(10, 20).returns(100);\n\tmocked.mock('foo').takes(10, 20).returns(200);\n\n\tmocked.foo(10, 20); //returns 100\n\tmocked.foo(10, 20); //returns 200\n\t\n### mock a single method more than once\n\tvar mocked = nodemock.mock(\"foo\").takes(10, 20);\n\tmocked.mock(\"foo\").takes(20, 30);\n\tmocked.mock(\"foo\").takes(500);\n\t\n\tmocked.foo(10, 20);\n\tmocked.foo(20, 30)\n\tmocked.foo(500);\n\t\n\t//check whether everything has done\n\tmocked.assert(); //returns true\n\n### reset the mock\n\t\n\tvar mocked = nm.mock('foo').returns(100);\n\tmocked.foo(); //returns 100\n\tmocked.assert(); //returns true\n\t\t\n\tmocked.reset();\n\t\n\tmocked.mock('doo').returns(300);\n\tmocked.doo(); //returns 300\n\tmock.assert() //returns true\n\n### ignore method\nSometime we need to ignore some methods going through mocking rules. But we need to have those methods but doing nothing.\n\n\tvar mocked = mock.ignore('hello');\n\tmocked.mock('foo').returns(100);\n\n\tmock.foo(); //returns 100\n\tmock.hello(); //do nothing but the method exists\n\n\tmock.assert(); // return true, assert have nothing to do with ignored methods\nAPI Documentation\n-----------------\n\n### Construction ###\n\n\tvar mocked = require('nodemock').mock('foo');\n\t\tCreating a object with mock function \"foo\"\n\t\n\tmocked.mock(methodName)\n\t\tUsed to alter or create a new mock method and add rules to it as usual\n\t\t\n### Rules ###\n\n\tmocked.takes(arg1, args2, ...)\n\t\tSpecify arguments of the function and verify then when calling\n\t\t\n\tmocked.returns(returnValue)\n\t\tSpecify the return value of the function\n\t\t\n\tmocked.calls(callbackPosition, argumentsArray)\t\t \n\t\tCalls a callback at the arguments in index `callbackPosition`\n\t\twith the arguments specified in the \"argumentsArray\"\n\t\t\n\t\twhen using this you've to define a function signature as a callback in the argument list\n\t\tfor a callback at index 2 .takes() function will be as,\n\t\tmocked.takes(10, 20, function(){})\n\t\n\t\t\n\tmocked.fail()\n\t\tIf calls at very begining afterword any call on the mocked objects will fail\n\t\tOtherwise current mock method will fails someone called that. \n\t\t\n\tmocked.times(repetitiveCount);\n\t\tWe can rule the mocked method to be called multiple times with same parameters\n\t\tFinally we can check that using above assert method;\n\n\tmocked.reset()\n\t\tReset all the rules and mocks created. And bring mocked object into a stage when \nit's created\n\n\tmocked.ignore()\n\t\tIgnore Some methods from the mocking behaviour\n\t\n### Confirm ###\n\n\tmocked.assert();\n\t\tChecks whether rules we've defined using other methods were executed.\n\t\tIf all the rules were executed return true, otherwise false\n\n\tmocked.assertThrows();\n\t\tSame as the mocked.assert() but throws an execption if rules breaks.\n\t\t\nLicense\n-------\nThe MIT License\n\nCopyright (c) 2011 Arunoda Susiripala\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "nodemock@0.2.17",
  "dist": {
    "shasum": "a45e1d958c4f03ffad94df21e863a37d77376354"
  },
  "_from": "nodemock@",
  "_resolved": "https://registry.npmjs.org/nodemock/-/nodemock-0.2.17.tgz"
}
